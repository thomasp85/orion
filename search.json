[{"path":[]},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement thomasp85@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://orion.r-euclid.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://orion.r-euclid.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 orion authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://orion.r-euclid.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Lin Pedersen. Author, maintainer.","code":""},{"path":"https://orion.r-euclid.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pedersen T (2023). orion: Spatial Searching Euclid. https://github.com/thomasp85/orion, https://thomasp85.github.io/orion/.","code":"@Manual{,   title = {orion: Spatial Searching for Euclid},   author = {Thomas Lin Pedersen},   year = {2023},   note = {https://github.com/thomasp85/orion, https://thomasp85.github.io/orion/}, }"},{"path":"https://orion.r-euclid.com/index.html","id":"orion-","dir":"","previous_headings":"","what":"orion: 2d and 3D spatial searching for euclid\n","title":"orion: 2d and 3D spatial searching for euclid\n","text":"orion provides spatial searching euclid ecosystem. kd tree supports nearest/furthest neighbor well range queries.","code":""},{"path":"https://orion.r-euclid.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"orion: 2d and 3D spatial searching for euclid\n","text":"can install development version orion like :","code":"devtools::install_github(\"thomasp85/orion\")"},{"path":"https://orion.r-euclid.com/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"orion: 2d and 3D spatial searching for euclid\n","text":"search always start creating kd tree, can created 2D 3D points. can provide range different strategies created just using defaults. Now can use tree various queries. vectorised queries tree can queried efficiently multiple times. shown standard nearest neighbor search 10 closest neighbors input:  can also range queries (ie. return points inside geometry):  basics — focused package. bit obvious docs.","code":"library(euclid) #>  #> Attaching package: 'euclid' #> The following object is masked from 'package:stats': #>  #>     line #> The following object is masked from 'package:base': #>  #>     union library(orion)  pts <- point(runif(100), runif(100)) tree <- kd_tree(pts) tree #> <2D kd tree [100]> #> Tree constructed using the sliding midpoint strategy #>  - bucket size: 10 pt <- point(0.4, 0.7) neighbors <- kd_tree_search(pt, tree, n = 10) plot(pts, cex = 1) euclid_plot(neighbors$points, cex = 0.6, pch = 16, col = 'firebrick') euclid_plot(pt, cex = 1, pch = 16, col = 'forestgreen') circ <- circle(pt, 0.04) inside <- kd_tree_range(circ, tree) plot(pts, cex = 1) euclid_plot(inside$points, cex = 0.6, pch = 16, col = 'firebrick') euclid_plot(circ, fg = 'forestgreen')"},{"path":"https://orion.r-euclid.com/index.html","id":"benchmark","dir":"","previous_headings":"","what":"Benchmark","title":"orion: 2d and 3D spatial searching for euclid\n","text":"advantages using kd tree naive approach. can see construction tree makes kd tree based search slower single naive search, tree can reused multiple queries making good approach practical applications","code":"naive_search <- function(query, points, n) {   d <- distance_squared(query, points)   points[order(d)[seq_len(n)]] }  lookup <- point(runif(1e4), runif(1e4)) query <- point(0.5, 0.5) tree <- kd_tree(lookup)  bench::mark(   naive               = naive_search(query, lookup, 10),   kd_tree_precomputed = kd_tree_search(query, tree, 10),   kd_tree_tree_build  = kd_tree_search(query, kd_tree(lookup), 10),   iterations = 100,   check = FALSE ) #> # A tibble: 3 × 6 #>   expression               min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>          <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 naive                 2.05ms   2.14ms     443.      114KB      0   #> 2 kd_tree_precomputed 102.75µs 105.58µs    9295.         0B     93.9 #> 3 kd_tree_tree_build   28.02ms  28.65ms      34.9        0B      0"},{"path":"https://orion.r-euclid.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"orion: 2d and 3D spatial searching for euclid\n","text":"Please note orion project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a kd tree of points to search on — kd_tree","title":"Create a kd tree of points to search on — kd_tree","text":"efficient spatial search often done two steps: 1) Prepare points search potential costly operation, 2) Perform one searches prepared data. orion package supports efficient searching based kd tree representation search space. kd tree can created range different setups, using different splitters bucket sizes leaf nodes.","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a kd tree of points to search on — kd_tree","text":"","code":"kd_tree(   points,   split_strategy = \"sliding_midpoint\",   bucket_size = 10,   aspect = 3 )  is_kd_tree(x)"},{"path":"https://orion.r-euclid.com/reference/kd_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a kd tree of points to search on — kd_tree","text":"points euclid_point vector holding points search split_strategy One \"fair\", \"sliding_fair\", \"sliding_midpoint\", \"median_of_max_spread\", \"median_of_rectangle\", \"midpoint_of_max_spread\", \"midpoint_of_rectangle\", defining splitting strategy use creating new nodes kd tree bucket_size maximum number points terminal nodes kd tree aspect \"fair\" \"sliding_fair splitting strategies, defines maximum aspect ratio largest smallest side split. x orion_kd_tree object","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a kd tree of points to search on — kd_tree","text":"orion_kd_tree object","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a kd tree of points to search on — kd_tree","text":"Search performance mostly informed well balanced tree . can influence selecting splitting rule use building tree. single best rule rules degenerate worst cases. trouble tree construction performance issues searches, try different splitting rule bucket size. \"midpoint_of_rectangle\": splitting rule cuts rectangle midpoint orthogonal longest side. \"midpoint_of_max_spread\": splitting rule cuts rectangle (Mind+Maxd)/2 orthogonal dimension maximum point spread [Mind,Maxd]. \"sliding_midpoint\" (default): modification midpoint rectangle splitting rule. first attempts perform midpoint rectangle split described . data points lie sides separating plane sliding midpoint rule computes separator midpoint rectangle rule. data points lie one side avoids sliding separator, computed midpoint rectangle rule, nearest data point. \"median_of_rectangle: splitting dimension dimension longest side rectangle. splitting value defined median coordinates data points along dimension. \"median_of_max_spread\": splitting dimension dimension largest spread. splitting value defined median coordinates data points along dimension. \"fair\": splitting rule compromise median rectangle splitting rule midpoint rectangle splitting rule. splitting rule maintains upper bound maximal allowed ratio longest shortest side rectangle (value upper bound set constructor fair splitting rule). Among splits satisfy bound, selects one points largest spread. splits points even manner possible, subject maintaining bound ratio resulting rectangles. \"sliding_fair\": splitting rule compromise fair splitting rule sliding midpoint rule. Sliding fair-split based theory two types splits good: balanced splits produce fat rectangles, unbalanced splits provided rectangle fewer points fat. Also, splitting rule maintains upper bound maximal allowed ratio longest shortest side rectangle (value upper bound set constructor fair splitting rule). Among splits satisfy bound, selects one one points largest spread. considers extreme cuts allowed aspect ratio bound. done dividing longest side rectangle aspect ratio bound. median cut lies extreme cuts, use median cut. , consider extreme cut closer median. points lie one side cut, slide cut hits first point. may violate aspect ratio bound, never generate empty cells. order improve performance range queries large data sets can experiment increasing bucket size tree building can lead fewer traversels searching.","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate points contained within a geometry — kd_tree_range","title":"Locate points contained within a geometry — kd_tree_range","text":"kd tree often used locate nearest neighbors, works equally well quickly looking points contained within geometry. type query obviously work points circles/spheres rectangles/cubes. kd_tree_search() possible fuzzy search providing eps, works differently. kd_tree_range() eps argument provides fuzzy zone around query geometry. circle/spheres, means points inside radius - eps get reported, points inside radius + eps, outside radius - eps may get reported, points outside radius + eps get reported. rectangles/cubes works instead dilates expands box eps arguments create fuzzy zones.","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate points contained within a geometry — kd_tree_range","text":"","code":"kd_tree_range(geometries, tree, eps = 0, ...)"},{"path":"https://orion.r-euclid.com/reference/kd_tree_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate points contained within a geometry — kd_tree_range","text":"geometries vector geometries use queries. Either euclid_circle2, euclid_sphere, euclid_iso_rect, euclid_iso_cube vector. euclid_bbox get coerced euclid_iso_rect/euclid_iso_cube tree orion_kd_tree eps Fuzzyness factor query. See description. recycle length geometries ... Arguments passed ","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate points contained within a geometry — kd_tree_range","text":"list elements points holding euclid_point vector id matching points index geometries","code":""},{"path":[]},{"path":"https://orion.r-euclid.com/reference/kd_tree_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate points contained within a geometry — kd_tree_range","text":"","code":"# Create a kd tree with points pts <- euclid::point(runif(100), runif(100)) tree <- kd_tree(pts)  # Do an exact range query (eps = 0) pt <- euclid::point(0.4, 0.7) circ <- euclid::circle(pt, 0.02) inside <- kd_tree_range(circ, tree) plot(pts, cex = 1) euclid_plot(inside$points, cex = 0.6, pch = 16, col = 'red') euclid_plot(circ, fg = 'green')   # Do a fuzzy range query circ <- euclid::circle(pt, 0.04) inside <- kd_tree_range(circ, tree, 0.1) plot(pts, cex = 1) euclid_plot(inside$points, cex = 0.6, pch = 16, col = 'red') euclid_plot(circ, fg = 'green') euclid_plot(circle(pt, 0.1^2), fg = 'green', lty = 2) euclid_plot(circle(pt, 0.3^2), fg = 'green', lty = 2)"},{"path":"https://orion.r-euclid.com/reference/kd_tree_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate nearest or farthest points in a tree — kd_tree_search","title":"Locate nearest or farthest points in a tree — kd_tree_search","text":"kd tree excellent locating points closest farthest given object. orion supports queries points, circle/spheres, iso_rect/iso_cubes. point lies inside geometry distance 0. points requested lies inside geometry subset returned. orion supports approximate queries eps argument. Using speed searches may return wrong results (within bounds given eps).","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate nearest or farthest points in a tree — kd_tree_search","text":"","code":"kd_tree_search(geometries, tree, n, eps = 0, nearest = TRUE, sort = TRUE, ...)"},{"path":"https://orion.r-euclid.com/reference/kd_tree_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate nearest or farthest points in a tree — kd_tree_search","text":"geometries vector geometries use queries. Either euclid_point, euclid_circle2, euclid_sphere, euclid_iso_rect, euclid_iso_cube vector. euclid_point_w get coerced euclid_point euclid_bbox get coerced euclid_iso_rect/euclid_iso_cube tree orion_kd_tree n integer vector giving number points find per query. recycle length geometries eps Approximation factor search. nearest neighbor returned points 1 + eps times farther away true nearest neighbor, whereas furthest neighbor returned points less 1/(1 + eps) nearer distance true match. recycle length geometries nearest nearest neighbor search (setting FALSE results furthest neighbor search) sort returned points search distance query ... Arguments passed ","code":""},{"path":"https://orion.r-euclid.com/reference/kd_tree_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate nearest or farthest points in a tree — kd_tree_search","text":"list elements points holding euclid_point vector, id matching points index geometries, distance providing distance query","code":""},{"path":[]},{"path":"https://orion.r-euclid.com/reference/kd_tree_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate nearest or farthest points in a tree — kd_tree_search","text":"","code":"# Create a kd tree with points pts <- euclid::point(runif(100), runif(100)) tree <- kd_tree(pts)  # Find furthest neighbor to point pt <- euclid::point(0.4, 0.7) neighbors <- kd_tree_search(pt, tree, 10, nearest = FALSE) plot(pts, cex = 1) euclid_plot(neighbors$points, cex = 0.6, pch = 16, col = 'red') euclid_plot(pt, cex = 1, pch = 16, col = 'green')   # Find nearest neighbor to circle circ <- euclid::circle(pt, 0.01) neighbors <- kd_tree_search(circ, tree, 10) plot(pts, cex = 1) euclid_plot(neighbors$points, cex = 0.6, pch = 16, col = 'red') euclid_plot(circ, fg = 'green')"},{"path":"https://orion.r-euclid.com/reference/orion-package.html","id":null,"dir":"Reference","previous_headings":"","what":"orion: Spatial Searching for Euclid — orion-package","title":"orion: Spatial Searching for Euclid — orion-package","text":"task finding points closest geometry contained within geometry huge set points important task many geometry algorithms. 'orion' provides spatial searching Euclid ecosystem powerful kd tree implementation supports nearest/furthest neighbor range queries.","code":""},{"path":[]},{"path":"https://orion.r-euclid.com/reference/orion-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"orion: Spatial Searching for Euclid — orion-package","text":"Maintainer: Thomas Lin Pedersen thomasp85@gmail.com (ORCID)","code":""}]
