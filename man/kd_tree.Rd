% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tree.R
\name{kd_tree}
\alias{kd_tree}
\alias{is_kd_tree}
\title{Create a kd tree of points to search on}
\usage{
kd_tree(
  points,
  split_strategy = "sliding_midpoint",
  bucket_size = 10,
  aspect = 3
)

is_kd_tree(x)
}
\arguments{
\item{points}{A \code{euclid_point} vector holding the points to search}

\item{split_strategy}{One of \code{"fair"}, \code{"sliding_fair"}, \code{"sliding_midpoint"},
\code{"median_of_max_spread"}, \code{"median_of_rectangle"}, \code{"midpoint_of_max_spread"},
or \code{"midpoint_of_rectangle"}, defining the splitting strategy to use when
creating new nodes in the kd tree}

\item{bucket_size}{The maximum number of points in the terminal nodes of the
kd tree}

\item{aspect}{For \code{"fair"} and \verb{"sliding_fair} splitting strategies, defines
the maximum aspect ratio between the largest and smallest side of the split.}

\item{x}{An \code{orion_kd_tree} object}
}
\value{
An \code{orion_kd_tree} object
}
\description{
An efficient spatial search is often done in two steps: 1) Prepare the points
to search in a potential costly operation, 2) Perform one or more searches on
the prepared data. The orion package supports efficient searching based on a
kd tree representation of the search space. The kd tree can be created with a
range of different setups, using different splitters and bucket sizes for
leaf nodes.
}
