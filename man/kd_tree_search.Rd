% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search.R
\name{kd_tree_search}
\alias{kd_tree_search}
\title{Locate nearest or farthest points in a tree}
\usage{
kd_tree_search(geometries, tree, n, eps = 0, nearest = TRUE, sort = TRUE, ...)
}
\arguments{
\item{geometries}{A vector of geometries to use for queries. Either a
\code{euclid_point}, \code{euclid_circle2}, \code{euclid_sphere}, \code{euclid_iso_rect}, or
\code{euclid_iso_cube} vector. \code{euclid_point_w} will get coerced to \code{euclid_point}
and \code{euclid_bbox} will get coerced to \code{euclid_iso_rect}/\code{euclid_iso_cube}}

\item{tree}{a \code{orion_kd_tree}}

\item{n}{An integer vector giving the number of points to find per query.
Will recycle to the length of \code{geometries}}

\item{eps}{Approximation factor for the search. For nearest neighbor the
returned points are no more than \code{1 + eps} times farther away than the true
nearest neighbor, whereas for furthest neighbor the returned points are no
less than \code{1/(1 + eps)} nearer than the distance to the true match. Will
recycle to the length of \code{geometries}}

\item{nearest}{Should nearest neighbor be search (setting it to \code{FALSE}
results in a furthest neighbor search)}

\item{sort}{Should the returned points be search by their distance to the
query}

\item{...}{Arguments passed on}
}
\value{
A list with elements \code{points} holding a \code{euclid_point} vector, \code{id}
matching the \code{points} to the index of \code{geometries}, and \code{distance} providing
the distance to the query
}
\description{
A kd tree is excellent for locating the points closest or farthest from a
given object. orion supports queries from points, circle/spheres, and
iso_rect/iso_cubes. If a point lies inside the geometry it's distance is 0.
If more points than requested lies inside the geometry a subset of these will
be returned. orion supports approximate queries through the \code{eps} argument.
Using it will speed up searches but may return wrong results (but within the
bounds of the given \code{eps}).
}
\examples{
# Create a kd tree with points
pts <- euclid::point(runif(100), runif(100))
tree <- kd_tree(pts)

# Find furthest neighbor to point
pt <- euclid::point(0.4, 0.7)
neighbors <- kd_tree_search(pt, tree, 10, nearest = FALSE)
plot(pts, cex = 1)
euclid_plot(neighbors$points, cex = 0.6, pch = 16, col = 'red')
euclid_plot(pt, cex = 1, pch = 16, col = 'green')

# Find nearest neighbor to circle
circ <- euclid::circle(pt, 0.01)
neighbors <- kd_tree_search(circ, tree, 10)
plot(pts, cex = 1)
euclid_plot(neighbors$points, cex = 0.6, pch = 16, col = 'red')
euclid_plot(circ, fg = 'green')

}
\seealso{
Other kd tree queries: 
\code{\link{kd_tree_range}()}
}
\concept{kd tree queries}
