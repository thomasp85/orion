% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/range.R
\name{kd_tree_range}
\alias{kd_tree_range}
\title{Locate points contained within a geometry}
\usage{
kd_tree_range(geometries, tree, eps = 0, ...)
}
\arguments{
\item{geometries}{A vector of geometries to use for queries. Either a
\code{euclid_circle2}, \code{euclid_sphere}, \code{euclid_iso_rect}, or \code{euclid_iso_cube}
vector. \code{euclid_bbox} will get coerced to \code{euclid_iso_rect}/\code{euclid_iso_cube}}

\item{tree}{a \code{orion_kd_tree}}

\item{eps}{Fuzzyness factor for the query. See the description. Will recycle
to the length of \code{geometries}}

\item{...}{Arguments passed on}
}
\value{
A list with elements \code{points} holding a \code{euclid_point} vector and \code{id}
matching the \code{points} to the index of \code{geometries}
}
\description{
While a kd tree is often used to locate nearest neighbors, it works equally
well for quickly looking up points contained within a geometry. This type of
query obviously doesn't work for points but only circles/spheres and
rectangles/cubes. As with \code{\link[=kd_tree_search]{kd_tree_search()}} it is possible to do a fuzzy
search by providing an \code{eps}, but it works differently. For \code{kd_tree_range()}
the \code{eps} argument provides a fuzzy zone around the query geometry. For
circle/spheres, this means that all points inside \code{radius - eps} will get
reported, points inside \code{radius + eps}, but outside \code{radius - eps} \emph{may} get
reported, and points outside \code{radius + eps} will not get reported. For
rectangles/cubes it works the same but instead it dilates and expands the box
by the \code{eps} arguments to create the fuzzy zones.
}
\examples{
# Create a kd tree with points
pts <- euclid::point(runif(100), runif(100))
tree <- kd_tree(pts)

# Do an exact range query (eps = 0)
pt <- euclid::point(0.4, 0.7)
circ <- euclid::circle(pt, 0.02)
inside <- kd_tree_range(circ, tree)
plot(pts, cex = 1)
euclid_plot(inside$points, cex = 0.6, pch = 16, col = 'red')
euclid_plot(circ, fg = 'green')

# Do a fuzzy range query
circ <- euclid::circle(pt, 0.04)
inside <- kd_tree_range(circ, tree, 0.1)
plot(pts, cex = 1)
euclid_plot(inside$points, cex = 0.6, pch = 16, col = 'red')
euclid_plot(circ, fg = 'green')
euclid_plot(circle(pt, 0.1^2), fg = 'green', lty = 2)
euclid_plot(circle(pt, 0.3^2), fg = 'green', lty = 2)

}
\seealso{
Other kd tree queries: 
\code{\link{kd_tree_search}()}
}
\concept{kd tree queries}
