// Generated by cpp11: do not edit by hand
// clang-format off

#include "orion_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// tree.cpp
fair_tree_2_p create_fair_tree_2(SEXP points, int bucket, double aspect);
extern "C" SEXP _orion_create_fair_tree_2(SEXP points, SEXP bucket, SEXP aspect) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_fair_tree_2(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket), cpp11::as_cpp<cpp11::decay_t<double>>(aspect)));
  END_CPP11
}
// tree.cpp
fair_tree_3_p create_fair_tree_3(SEXP points, int bucket, double aspect);
extern "C" SEXP _orion_create_fair_tree_3(SEXP points, SEXP bucket, SEXP aspect) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_fair_tree_3(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket), cpp11::as_cpp<cpp11::decay_t<double>>(aspect)));
  END_CPP11
}
// tree.cpp
median_of_max_spread_tree_2_p create_median_of_max_spread_tree_2(SEXP points, int bucket);
extern "C" SEXP _orion_create_median_of_max_spread_tree_2(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_median_of_max_spread_tree_2(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
median_of_max_spread_tree_3_p create_median_of_max_spread_tree_3(SEXP points, int bucket);
extern "C" SEXP _orion_create_median_of_max_spread_tree_3(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_median_of_max_spread_tree_3(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
median_of_rectangle_tree_2_p create_median_of_rectangle_tree_2(SEXP points, int bucket);
extern "C" SEXP _orion_create_median_of_rectangle_tree_2(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_median_of_rectangle_tree_2(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
median_of_rectangle_tree_3_p create_median_of_rectangle_tree_3(SEXP points, int bucket);
extern "C" SEXP _orion_create_median_of_rectangle_tree_3(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_median_of_rectangle_tree_3(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
midpoint_of_max_spread_tree_2_p create_midpoint_of_max_spread_tree_2(SEXP points, int bucket);
extern "C" SEXP _orion_create_midpoint_of_max_spread_tree_2(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_midpoint_of_max_spread_tree_2(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
midpoint_of_max_spread_tree_3_p create_midpoint_of_max_spread_tree_3(SEXP points, int bucket);
extern "C" SEXP _orion_create_midpoint_of_max_spread_tree_3(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_midpoint_of_max_spread_tree_3(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
midpoint_of_rectangle_tree_2_p create_midpoint_of_rectangle_tree_2(SEXP points, int bucket);
extern "C" SEXP _orion_create_midpoint_of_rectangle_tree_2(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_midpoint_of_rectangle_tree_2(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
midpoint_of_rectangle_tree_3_p create_midpoint_of_rectangle_tree_3(SEXP points, int bucket);
extern "C" SEXP _orion_create_midpoint_of_rectangle_tree_3(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_midpoint_of_rectangle_tree_3(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
sliding_fair_tree_2_p create_sliding_fair_tree_2(SEXP points, int bucket, double aspect);
extern "C" SEXP _orion_create_sliding_fair_tree_2(SEXP points, SEXP bucket, SEXP aspect) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_sliding_fair_tree_2(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket), cpp11::as_cpp<cpp11::decay_t<double>>(aspect)));
  END_CPP11
}
// tree.cpp
sliding_fair_tree_3_p create_sliding_fair_tree_3(SEXP points, int bucket, double aspect);
extern "C" SEXP _orion_create_sliding_fair_tree_3(SEXP points, SEXP bucket, SEXP aspect) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_sliding_fair_tree_3(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket), cpp11::as_cpp<cpp11::decay_t<double>>(aspect)));
  END_CPP11
}
// tree.cpp
sliding_midpoint_tree_2_p create_sliding_midpoint_tree_2(SEXP points, int bucket);
extern "C" SEXP _orion_create_sliding_midpoint_tree_2(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_sliding_midpoint_tree_2(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
sliding_midpoint_tree_3_p create_sliding_midpoint_tree_3(SEXP points, int bucket);
extern "C" SEXP _orion_create_sliding_midpoint_tree_3(SEXP points, SEXP bucket) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_sliding_midpoint_tree_3(cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<int>>(bucket)));
  END_CPP11
}
// tree.cpp
cpp11::writable::integers tree_dimension(tree_base_p tree);
extern "C" SEXP _orion_tree_dimension(SEXP tree) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_dimension(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree)));
  END_CPP11
}
// tree.cpp
cpp11::writable::strings tree_split_type(tree_base_p tree);
extern "C" SEXP _orion_tree_split_type(SEXP tree) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_split_type(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree)));
  END_CPP11
}
// tree.cpp
cpp11::writable::integers tree_size(tree_base_p tree);
extern "C" SEXP _orion_tree_size(SEXP tree) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_size(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree)));
  END_CPP11
}
// tree.cpp
cpp11::writable::integers tree_bucket_size(tree_base_p tree);
extern "C" SEXP _orion_tree_bucket_size(SEXP tree) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_bucket_size(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree)));
  END_CPP11
}
// tree.cpp
cpp11::writable::doubles tree_aspect_ratio(tree_base_p tree);
extern "C" SEXP _orion_tree_aspect_ratio(SEXP tree) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_aspect_ratio(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree)));
  END_CPP11
}
// tree.cpp
SEXP tree_points(tree_base_p tree);
extern "C" SEXP _orion_tree_points(SEXP tree) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_points(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree)));
  END_CPP11
}
// tree.cpp
SEXP tree_bbox(tree_base_p tree);
extern "C" SEXP _orion_tree_bbox(SEXP tree) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_bbox(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree)));
  END_CPP11
}
// tree.cpp
SEXP tree_point_search(tree_base_p tree, SEXP points, cpp11::integers n, SEXP eps, bool nearest, bool sort);
extern "C" SEXP _orion_tree_point_search(SEXP tree, SEXP points, SEXP n, SEXP eps, SEXP nearest, SEXP sort) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_point_search(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(n), cpp11::as_cpp<cpp11::decay_t<SEXP>>(eps), cpp11::as_cpp<cpp11::decay_t<bool>>(nearest), cpp11::as_cpp<cpp11::decay_t<bool>>(sort)));
  END_CPP11
}
// tree.cpp
SEXP tree_spheroid_search(tree_base_p tree, SEXP spheroids, cpp11::integers n, SEXP eps, bool nearest, bool sort);
extern "C" SEXP _orion_tree_spheroid_search(SEXP tree, SEXP spheroids, SEXP n, SEXP eps, SEXP nearest, SEXP sort) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_spheroid_search(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree), cpp11::as_cpp<cpp11::decay_t<SEXP>>(spheroids), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(n), cpp11::as_cpp<cpp11::decay_t<SEXP>>(eps), cpp11::as_cpp<cpp11::decay_t<bool>>(nearest), cpp11::as_cpp<cpp11::decay_t<bool>>(sort)));
  END_CPP11
}
// tree.cpp
SEXP tree_box_search(tree_base_p tree, SEXP boxes, cpp11::integers n, SEXP eps, bool nearest, bool sort);
extern "C" SEXP _orion_tree_box_search(SEXP tree, SEXP boxes, SEXP n, SEXP eps, SEXP nearest, SEXP sort) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_box_search(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree), cpp11::as_cpp<cpp11::decay_t<SEXP>>(boxes), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(n), cpp11::as_cpp<cpp11::decay_t<SEXP>>(eps), cpp11::as_cpp<cpp11::decay_t<bool>>(nearest), cpp11::as_cpp<cpp11::decay_t<bool>>(sort)));
  END_CPP11
}
// tree.cpp
SEXP tree_spheroid_range(tree_base_p tree, SEXP spheroids, SEXP eps);
extern "C" SEXP _orion_tree_spheroid_range(SEXP tree, SEXP spheroids, SEXP eps) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_spheroid_range(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree), cpp11::as_cpp<cpp11::decay_t<SEXP>>(spheroids), cpp11::as_cpp<cpp11::decay_t<SEXP>>(eps)));
  END_CPP11
}
// tree.cpp
SEXP tree_box_range(tree_base_p tree, SEXP boxes, SEXP eps);
extern "C" SEXP _orion_tree_box_range(SEXP tree, SEXP boxes, SEXP eps) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_box_range(cpp11::as_cpp<cpp11::decay_t<tree_base_p>>(tree), cpp11::as_cpp<cpp11::decay_t<SEXP>>(boxes), cpp11::as_cpp<cpp11::decay_t<SEXP>>(eps)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_orion_create_fair_tree_2",                   (DL_FUNC) &_orion_create_fair_tree_2,                   3},
    {"_orion_create_fair_tree_3",                   (DL_FUNC) &_orion_create_fair_tree_3,                   3},
    {"_orion_create_median_of_max_spread_tree_2",   (DL_FUNC) &_orion_create_median_of_max_spread_tree_2,   2},
    {"_orion_create_median_of_max_spread_tree_3",   (DL_FUNC) &_orion_create_median_of_max_spread_tree_3,   2},
    {"_orion_create_median_of_rectangle_tree_2",    (DL_FUNC) &_orion_create_median_of_rectangle_tree_2,    2},
    {"_orion_create_median_of_rectangle_tree_3",    (DL_FUNC) &_orion_create_median_of_rectangle_tree_3,    2},
    {"_orion_create_midpoint_of_max_spread_tree_2", (DL_FUNC) &_orion_create_midpoint_of_max_spread_tree_2, 2},
    {"_orion_create_midpoint_of_max_spread_tree_3", (DL_FUNC) &_orion_create_midpoint_of_max_spread_tree_3, 2},
    {"_orion_create_midpoint_of_rectangle_tree_2",  (DL_FUNC) &_orion_create_midpoint_of_rectangle_tree_2,  2},
    {"_orion_create_midpoint_of_rectangle_tree_3",  (DL_FUNC) &_orion_create_midpoint_of_rectangle_tree_3,  2},
    {"_orion_create_sliding_fair_tree_2",           (DL_FUNC) &_orion_create_sliding_fair_tree_2,           3},
    {"_orion_create_sliding_fair_tree_3",           (DL_FUNC) &_orion_create_sliding_fair_tree_3,           3},
    {"_orion_create_sliding_midpoint_tree_2",       (DL_FUNC) &_orion_create_sliding_midpoint_tree_2,       2},
    {"_orion_create_sliding_midpoint_tree_3",       (DL_FUNC) &_orion_create_sliding_midpoint_tree_3,       2},
    {"_orion_tree_aspect_ratio",                    (DL_FUNC) &_orion_tree_aspect_ratio,                    1},
    {"_orion_tree_bbox",                            (DL_FUNC) &_orion_tree_bbox,                            1},
    {"_orion_tree_box_range",                       (DL_FUNC) &_orion_tree_box_range,                       3},
    {"_orion_tree_box_search",                      (DL_FUNC) &_orion_tree_box_search,                      6},
    {"_orion_tree_bucket_size",                     (DL_FUNC) &_orion_tree_bucket_size,                     1},
    {"_orion_tree_dimension",                       (DL_FUNC) &_orion_tree_dimension,                       1},
    {"_orion_tree_point_search",                    (DL_FUNC) &_orion_tree_point_search,                    6},
    {"_orion_tree_points",                          (DL_FUNC) &_orion_tree_points,                          1},
    {"_orion_tree_size",                            (DL_FUNC) &_orion_tree_size,                            1},
    {"_orion_tree_spheroid_range",                  (DL_FUNC) &_orion_tree_spheroid_range,                  3},
    {"_orion_tree_spheroid_search",                 (DL_FUNC) &_orion_tree_spheroid_search,                 6},
    {"_orion_tree_split_type",                      (DL_FUNC) &_orion_tree_split_type,                      1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_orion(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
